(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

val type VT {
    x: int64,
    init(n: int64) {
        self->increment(n);
    },
    func increment(n: int64) {
        self.x = self.x + n;
    },
}

impl VT {
    func get() ret int64 {
        return self.x;
    }
}

ref type RT {
    x: int64,
    init() {
        self.x = 1;
        self->increment();
    },
    func increment() {
        inc self.x;
    },
    func get() ret int64 {
        return self.x;
    },
}

func main() ret int32 {
    let vt = alloc VT(4);
    let rt = alloc RT();

    assert vt->get() == 4;
    assert rt->get() == 2;

    rt->increment();
    vt->increment(2);

    assert vt->get() == 6;
    assert rt->get() == 3;

    return 0;
}
