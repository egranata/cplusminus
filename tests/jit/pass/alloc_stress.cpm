(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)
        
type pair {
    x: int64,
    y: int64
}

impl pair {
    func add(n: int64, m: int64) ret pair {
        let ret = alloc pair;
        ret.x = self.x + n;
        ret.y = self.y + m;
        return ret;
    }
}

func foo() ret int64 {
    var p = alloc pair;
    p.x = 12;
    p.y = 13;
    p = p->add(5, 7);
    return p.y - p.x;
}

func main() ret int32 {
    var i = 0;
    while (i < 500) {
        if (foo() == 3) { i = i + 1; }
        else { return 1; };
    };

    return 0;
}

