(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

ref type X {
    x: int64,
    init() {
        self.x = 3;
    }
}
ref type Y {
    x: int64,
    init() {
        self.x = 2;
    }
}

ref type Foo {
    x: int64,
    init() {
        self.x = 0;
    }
}

impl Foo {
    func add(x: X) {
        self.x = self.x + x.x;
    }
    func add(y: Y) {
        self.x = self.x - y.x;
    }
}

func main() ret int32 {
    let f = alloc Foo();
    assert f.x == 0;
    f->add(alloc X());
    assert f.x == 3;
    f->add(alloc Y());
    assert f.x == 1;
    f->add(alloc X());
    assert f.x == 4;
    f->add(alloc Y());
    assert f.x == 2;
    return 0;
}
