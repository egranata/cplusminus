(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

func abs_f32(x: float32) ret float32 {
    if (x >= 0.0) {
        return x;
    } else {
        return -x;
    };
}

func is_within_range_f32(x: float32, y: float32) ret bool {
    let diff = abs_f32(x-y);
    return (diff < 0.001);
}

func abs_f64(x: float64) ret float64 {
    if (x >= 0.0) {
        return x;
    } else {
        return -x;
    };
}

func is_within_range_f64(x: float64, y: float64) ret bool {
    let diff = abs_f64(x-y);
    return (diff < 0.001);
}

func test_int32_to_flt32() {
    let x: int32 = 3;
    let y: float32 = x as float32;
    assert is_within_range_f32(y, 3.0);
}

func test_int32_to_flt64() {
    let x: int32 = 3;
    let y: float64 = x as float64;
    assert is_within_range_f64(y, 3.0);
}

func test_int64_to_flt32() {
    let x: int64 = 3;
    let y: float32 = x as float32;
    assert is_within_range_f32(y, 3.0);
}

func test_int64_to_flt64() {
    let x: int64 = 3;
    let y: float64 = x as float64;
    assert is_within_range_f64(y, 3.0);
}

func test_flt32_to_int32() {
    let x: float32 = 3.1415;
    let y: int32 = x as int32;
    assert y == 3;
}

func test_flt32_to_int64() {
    let x: float32 = 2.71828;
    let y: int64 = x as int64;
    assert y == 2;
}

func test_flt64_to_int32() {
    let x: float64 = 3.1415;
    let y: int32 = x as int32;
    assert y == 3;
}

func test_flt64_to_int64() {
    let x: float64 = 2.71828;
    let y: int64 = x as int64;
    assert y == 2;
}

func main() ret int32 {
    test_int32_to_flt32();
    test_int32_to_flt64();
    test_int64_to_flt32();
    test_int64_to_flt64();

    test_flt32_to_int32();
    test_flt32_to_int64();
    test_flt64_to_int32();
    test_flt64_to_int64();

    return 0;
}