(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

extern vararg func printf(fmt: *byte) ret int32;

ref type Node {
    data: int32,
    next: Node,
    init(n: int32) {
        self.data = n;
    }
}

type ForNode = fn(int32) ret bool;

func print(n: int32) ret bool {
    printf("My value = %d\n", n);
    return true;
}

impl Node {
    func append(n: int32) {
        if (self.next == 0) {
            self.next = alloc Node(n);
        } else {
            self.next->append(n);
        };
    }
    func foreach(f: ForNode) {
        let cont = f(self.data);
        if (!cont) {
            return;
        };
        if (self.next != 0) {
            self.next->foreach(f);
        };
    }
}

func run() {
    let root = alloc Node(3);
    root->append(6);
    root->append(9);
    root->append(12);
    root->append(15);
    root->foreach(print);
}

func main() ret int64 {
    run();
    return g_FreedObjects;
}
