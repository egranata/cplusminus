(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

extern vararg func printf(fmt: *byte) ret int32;

type arr {
    data: *int64,
    len: int64
}

func print(a: arr) ret bool {
    var i = 0;
    var first = true;
    while (i < a.len) {
        if (first) { first = false; }
        else { printf(", "); };
        printf("[%llu] = %llu", i, a.data[i]);
        i = i + 1;
    };
    printf("\n");

    return true;
}

type transform = fn(int64) ret int64;

func map(a: arr, f: transform) ret bool {
    var i = 0;
    while (i < a.len) {
        a.data[i] = (*f)(a.data[i]);
        i = i + 1;
    };

    return true;
}

func double(x: int64) ret int64 {
    return x * 2;
}

func main() ret int64 {
    let d = [0, 1,2,3,4,5,6,7,8,9,10];
    printf("before:\n");
    let a = alloc arr;
    a.data = &d[0];
    a.len = (sizeof expr d) / (sizeof type int64);
    print(a);
    map(a, &double);
    printf("after:\n");
    print(a);
    return 0;
}