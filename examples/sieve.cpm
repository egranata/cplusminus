(* Copyright 2023 Enrico Granata *)
(* *)
(* Licensed under the Apache License, Version 2.0 (the "License"); *)
(* you may not use this file except in compliance with the License. *)
(* You may obtain a copy of the License at *)
(*  *)
(*     http://www.apache.org/licenses/LICENSE-2.0 *)
(*  *)
(* Unless required by applicable law or agreed to in writing, software *)
(* distributed under the License is distributed on an "AS IS" BASIS, *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(* See the License for the specific language governing permissions and *)
(* limitations under the License. *)

extern vararg func printf(fmt: *byte) ret int32;
extern func malloc(sz: int32) ret *byte;
extern func free(b: *byte);

type buffer {
    ptr: *byte,
    init(n: int32) {
        self.ptr = malloc(n);
    },
    dealloc {
        free(self.ptr);
    }
}

func sieve(a: *int32, n: int32)
{
    var j = 0;
    while(j<n) {
        a[j] = 1;
        inc j;
    };

    var i = 2;
    while(i<n) {
        if(a[i] == 1) {
            var j = i;
            while((i*j)<n) {
                a[i*j] = 0;
                inc j;
            };
        };
        inc i;
    };
 
    var first = true;
    var i = 2;

    printf("\nList of primes from 1 to %d are: ", n);
    while(i < n) {
        if (a[i] == 1) {
            if (first) {
                printf("%d", i);
                first = false;
            } else {
                printf(", %d", i);
            };
        };
        inc i;
    };

    printf("\n\n");
}

func main() ret int32
{
    let num_ints: int32 = 100;
    let buf = alloc buffer(num_ints * 5);
    let arr_ptr = buf.ptr as *int32;
    sieve(arr_ptr,num_ints);
    return 0;
}
